attack_technique: T1083
display_name: File and Directory Discovery
atomic_tests:
- name: File and Directory Discovery (cmd.exe)
  auto_generated_guid: 0e36303b-6762-4500-b003-127743b80ba6
  description: |
    Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.
  supported_platforms:
  - windows
  input_arguments:
    output_file:
        description: File to output results to
        type: String
        default: '%temp%\T1083Test1.txt'
  executor:
    command: |
      dir /s c:\ >> #{output_file}
      dir /s "c:\Documents and Settings" >> #{output_file}
      dir /s "c:\Program Files\" >> #{output_file}
      dir "%systemdrive%\Users\*.*" >> #{output_file}
      dir "%userprofile%\AppData\Roaming\Microsoft\Windows\Recent\*.*" >> #{output_file}
      dir "%userprofile%\Desktop\*.*" >> #{output_file}
      tree /F >> #{output_file}
    cleanup_command: |
      del #{output_file}
    name: command_prompt
- name: File and Directory Discovery (PowerShell)
  auto_generated_guid: 2158908e-b7ef-4c21-8a83-3ce4dd05a924
  description: |
    Find or discover files on the file system. Upon execution, file and folder information will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      ls -recurse
      get-childitem -recurse
      gci -recurse
    name: powershell
- name: Nix File and Directory Discovery
  auto_generated_guid: ffc8b249-372a-4b74-adcd-e4c0430842de
  description: |
    Find or discover files on the file system

    References:

    http://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/

    https://perishablepress.com/list-files-folders-recursively-terminal/
  supported_platforms:
  - macos
  - linux
  input_arguments:
    output_file:
      description: Output file used to store the results.
      type: Path
      default: /tmp/T1083.txt
  executor:
    command: |
      ls -a >> #{output_file}
      if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;
      file */* *>> #{output_file}
      cat #{output_file} 2>/dev/null
      find . -type f
      ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
      locate *
      which sh
    cleanup_command: |
      rm #{output_file}
    name: sh
- name: Nix File and Directory Discovery 2
  auto_generated_guid: 13c5e1ae-605b-46c4-a79f-db28c77ff24e
  description: |
    Find or discover files on the file system
  supported_platforms:
  - macos
  - linux
  input_arguments:
    output_file:
      description: Output file used to store the results.
      type: Path
      default: /tmp/T1083.txt
  executor:
    command: |
      cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > #{output_file}
      if [ -f /etc/mtab ]; then cat /etc/mtab >> #{output_file}; fi;
      find . -type f -iname *.pdf >> #{output_file}
      cat #{output_file}
      find . -type f -name ".*"
    cleanup_command: 'rm #{output_file}'
    name: sh
- name: Simulating MAZE Directory Enumeration
  auto_generated_guid: c6c34f61-1c3e-40fb-8a58-d017d88286d8
  description: |
    This test emulates MAZE ransomware's ability to enumerate directories using Powershell. 
    Upon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. 
    See https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents
  supported_platforms:
  - windows
  input_arguments:
    File_to_output:
      description: File to output results to
      type: String
      default: $env:temp\T1083Test5.txt
  executor:
    command: |
      $folderarray = @("Desktop", "Downloads", "Documents", "AppData/Local", "AppData/Roaming")
      Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}
      Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append #{File_to_output}
      Get-ChildItem -Path "${env:ProgramFiles(x86)}" -erroraction silentlycontinue | Out-File -append #{File_to_output}
      $UsersFolder = "$env:homedrive\Users\"
      foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) 
      {
      foreach ($secondarydirectory in $folderarray)
       {Get-ChildItem -Path "$UsersFolder/$directory/$secondarydirectory" -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}}
      }
      cat #{File_to_output}
    cleanup_command: |
      remove-item #{File_to_output} -ErrorAction SilentlyContinue
    name: powershell  
