attack_technique: T1078.004
display_name: 'Valid Accounts: Cloud Accounts'

atomic_tests:
- name: Creating GCP Service Account and Service Account Key
  auto_generated_guid: 9fdd83fd-bd53-46e5-a716-9dec89c8ae8e
  description: |
    GCP Service Accounts can be used to gain intial access as well as maintain persistence inside Google Cloud.
  supported_platforms:
  - google-workspace
  - iaas:gcp

  input_arguments:
    project-id:
      description: ID of the project, you want to create service account as well as service account key for
      type: string
      default: art-project-1

    service-account-name:
      description: Name of the service account
      type: string
      default: gcp-art-service-account-1

    service-account-email:
      description: Email of the service account
      type: string
      default: gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com

    output-key-file:
      description: Email of the service account
      type: string
      default: gcp-art-service-account-1.json

  executor:
    name: sh
    elevation_required: false
    command: |
      gcloud config set project #{project-id}
      gcloud iam service-accounts create #{service-account-name}
      gcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}
    cleanup_command: |
      gcloud iam service-accounts delete #{service-account-email} --quiet
  dependency_executor_name: sh
  dependencies:
  - description: |
      Requires gcloud
    prereq_command: |
      if [ -x "$(command -v gcloud)" ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      echo "Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install"
  - description: | 
      Check if user is logged in 
    prereq_command: |
      gcloud config get-value account
    get_prereq_command: |
      gcloud auth login --no-launch-browser
- name: Azure Persistence Automation Runbook Created or Modified
  auto_generated_guid: 348f4d14-4bd3-4f6b-bd8a-61237f78b3ac
  description: |
    Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure
    Automation runbook to execute malicious code and maintain persistence in their target's environment.
  supported_platforms:
  - iaas:azure
  input_arguments:
    resource_group:
      description: Name of the resource group
      type: string
      default: ART-ResourceGroupName-T1078-004
    runbook_name:
      description: Name of the runbook name
      type: string
      default: ART-RunbookName-T1078-004
    automation_account_name:
      description: Name of the automation account name
      type: string
      default: ART-AutomationAccountName-T1078-004
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Check if terraform is installed.
    prereq_command: |
      terraform version
    get_prereq_command: |
        echo "Please install terraform via https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli (URL accurate as of Nov. 15, 2024)."
  - description: |
      Check if Azure CLI and Azure Powershell are installed.

      * Login to Azure CLI with "az login", and login to Azure Powershell with "Connect-AzAccount". Sessions are not shared.
      * Azure Powershell used in this test as they have better automation performance and error logging than Azure CLI.
    prereq_command: |
      try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
    get_prereq_command: |
      $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindowsx64 -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\AzureCLI.msi
  - description: |
      Check if the user is logged into Azure.
    prereq_command: |
      try {if (-not (Get-AzContext)) { exit 1 } else { exit 0 }} catch {exit 1}
    get_prereq_command: |
      echo "* Configure your Azure account using: Connect-AzAccount"
  - description: |
      Create dependency resources using terraform

      * If fail to meet prereq, navigate to T1078.004-2 using "cd $PathToAtomicsFolder/T1078.004/src/T1078.004-2/"
      * Open the "terraform.tfvars" file and fill in the variables with your desired values.
      * Re-run -GetPrereqs
    prereq_command: |
      try {if (Test-Path "$PathToAtomicsFolder/T1078.004/src/T1078.004-2/terraform.tfstate" ){ exit 0 } else {exit 1}} catch {exit 1}
    get_prereq_command: |
      echo "Navigating to: $PathToAtomicsFolder/T1078.004/src/T1078.004-2/"
      cd "$PathToAtomicsFolder/T1078.004/src/T1078.004-2/"
      terraform init
      terraform apply -auto-approve
  executor:
    command: |
      New-AzAutomationRunbook -Name #{runbook_name} -Type PowerShell -ResourceGroupName #{resource_group} -Description 'my-test-runbook' -AutomationAccountName #{automation_account_name}
    name: powershell
    elevation_required: false
    cleanup_command: |
      Remove-AzAutomationRunbook -AutomationAccountName #{automation_account_name} -Name #{runbook_name} -ResourceGroupName #{resource_group} -Force
      Remove-AzAutomationAccount -ResourceGroupName #{resource_group} -Name #{automation_account_name} -Force
      Remove-AzResourceGroup -Name #{resource_group} -Force
      echo "Cleanup should be completed. Run 'terraform destroy` to ensure remaining resources are also deleted."
      cd "$PathToAtomicsFolder/T1078.004/src/T1078.004-2/"
      terraform destroy -auto-approve
- name: GCP - Create Custom IAM Role
  auto_generated_guid: 3a159042-69e6-4398-9a69-3308a4841c85
  description: |
    This atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*. The idea for this Atomic came from a Rule published by the Elastic team.

    Identifies an Identity and Access Management (IAM) custom role creation in Google Cloud Platform (GCP). 
    Custom roles are user-defined, and allow for the bundling of one or more supported permissions to meet specific needs. 
    Custom roles will not be updated automatically and could lead to privilege creep if not carefully scrutinized.
    
    This atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*
    
    Reference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/initial_access_gcp_iam_custom_role_creation.toml
    
  supported_platforms:
  - iaas:gcp
  input_arguments:
    project-id:
      description: ID of the GCP Project you to execute the command against.
      type: string
      default: atomic-test-1
    role-name:
      description: The name of the role to be created.
      type: string
      default: AtomicRedTeamRole
    role-description:
      description: The description of the role to be created.
      type: string
      default: Atomic Red Team Custom IAM Role
    roles:
      description: List of roles to be applied
      type: string
      default: iam.serviceAccounts.get
  executor:
    name: sh
    elevation_required: false
    command: |
      gcloud config set project #{project-id}
      gcloud iam roles create #{role-name} --description="#{role-description}" --permissions=#{roles} --project=#{project-id}
    cleanup_command: |
      gcloud iam roles delete #{role-name} --project=#{project-id}
  dependency_executor_name: sh
  dependencies:
  - description: |
      Requires gcloud
    prereq_command: |
      if [ -x "$(command -v gcloud)" ]; then exit 0; else exit 1; fi;
    get_prereq_command: |
      echo "Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install"
  - description: | 
      Check if user is logged in 
    prereq_command: |
      gcloud config get-value account
    get_prereq_command: |
      gcloud auth login --no-launch-browser
