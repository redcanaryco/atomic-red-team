attack_technique: T1055.012
display_name: 'Process Injection: Process Hollowing'
atomic_tests:
- name: Process Hollowing using PowerShell
  auto_generated_guid: 562427b4-39ef-4e8c-af88-463a78e70b9c
  description: |
    This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.
    Credit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)
  supported_platforms:
  - windows
  input_arguments:
    hollow_binary_path:
      description: Path of the binary to hollow (executable that will run inside the sponsor)
      type: string
      default: C:\Windows\System32\cmd.exe
    parent_process_name:
      description: Name of the parent process
      type: string
      default: explorer
    sponsor_binary_path:
      description: Path of the sponsor binary (executable that will host the binary)
      type: string
      default: C:\Windows\System32\calc.exe
    spawnto_process_name:
      description: Name of the process to spawn
      type: string
      default: calc
  executor:
    command: |
      . $PathToAtomicsFolder\T1055.012\src\Start-Hollow.ps1
      $ppid=Get-Process #{parent_process_name} | select -expand id
      Start-Hollow -Sponsor "#{sponsor_binary_path}" -Hollow "#{hollow_binary_path}" -ParentPID $ppid -Verbose
    cleanup_command: |
      Stop-Process -Name "#{spawnto_process_name}" -ErrorAction Ignore
    name: powershell
- name: RunPE via VBA
  auto_generated_guid: 
  description: |
    This module executes utilizes Process Hollowing to execute calc.exe. The method used is RunPE via VBA
  supported_platforms:
  - windows
  input_arguments:
    ms_product:
      description: Maldoc application Word
      type: String
      default: Word
    ms_office_version:
      description: Microsoft Office version number found in "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office"
      type: String
      default: $(((Get-ChildItem Registry::HKEY_CURRENT_USER\Software\Microsoft\Office -Name | select-string -pattern "^\d+\.\d+$").line.foreach({[decimal]$_}) | Sort-Object -desc)[0])
    sub_name:
      description: Name of Sub to execute
      type: String
      default: Exploit
    macrocode:
      description: Path to Macrocode to execute
      type: Path
      default: PathToAtomicsFolder\T1055.012\src\T1055.012-macrocode.txt
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Test Requires MS Office to be installed and have been run previously. Run -GetPrereqs to run msword and build dependent registry keys
    prereq_command: |
      If (Test-Path HKCU:SOFTWARE\Microsoft\Office\#{ms_office_version}) { exit 0 } else { exit 1 }
    get_prereq_command: |
      $xlApp = New-Object -ComObject "Word.Application"
      Stop-Process -Name WORD
  executor:
    command: |
      Import-Module C:\AtomicRedTeam\invoke-atomicredteam\Public\Invoke-MalDoc.ps1  
      Invoke-MalDoc #{macrocode} "#{sub_name}" "#{ms_office_version}" "#{ms_product}"
    cleanup_command: |
      Remove-ItemProperty -Path 'HKCU:\Software\Microsoft\Office\#{ms_office_version}\#{ms_product}\Security\' -Name 'AccessVBOM' -ErrorAction Ignore
    name: powershell
