---
attack_technique: T1016
display_name: System Network Configuration Discovery

atomic_tests:
- name: System Network Configuration Discovery
  description: |
    Identify network configuration information

    Upon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.

  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: false
    command: |
      ipconfig /all
      netsh interface show
      arp -a
      nbtstat -n
      net config

- name: List Windows Firewall Rules
  description: |
    Enumerates Windows Firewall Rules using netsh.

    Upon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.

  supported_platforms:
    - windows

  executor:
    name: command_prompt
    elevation_required: false
    command: |
      netsh advfirewall firewall show rule name=all

- name: System Network Configuration Discovery
  description: |
    Identify network configuration information.

    Upon successful execution, sh will spawn multiple commands and output will be via stdout.

  supported_platforms:
    - macos
    - linux

  executor:
    name: sh
    elevation_required: false
    command: |
      arp -a
      netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c
      ifconfig

- name: System Network Configuration Discovery (TrickBot Style)
  description: |
    Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/

    Upon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.

  supported_platforms:
    - windows
  executor:
    name: command_prompt
    elevation_required: false
    command: |
      ipconfig /all
      net config workstation
      net view /all /domain
      nltest /domain_trusts

- name: List Open Egress Ports
  description: |
    This is to test for what ports are open outbound.  The technique used was taken from the following blog:
    https://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/
    
    Upon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\open-ports.txt.
  supported_platforms:
    - windows
  input_arguments:
    port_file:
      description:
        The path to a text file containing ports to be scanned, one port per line. The default list uses the top 128 ports as defined by Nmap.
      type: Path
      default: PathToAtomicsFolder\T1016\src\top-128.txt
    portfile_url:
      description: URL to top-128.txt
      type: Url
      default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt
    output_file:
      description: Path of file to write port scan results
      type: Path
      default: $env:USERPROFILE\Desktop\open-ports.txt
  
  dependency_executor_name: powershell
  dependencies:
    - description: |
        Test requires #{port_file} to exist
      prereq_command: |
        if (Test-Path "#{port_file}") {exit 0} else {exit 1}
      get_prereq_command: |
        New-Item -Type Directory (split-path #{port_file}) -ErrorAction ignore | Out-Null
        Invoke-WebRequest "#{portfile_url}" -OutFile "#{port_file}"
  
  executor:
    name: powershell
    elevation_required: false
    command: |
      $ports = Get-content #{port_file}
      $file = "#{output_file}"
      $totalopen = 0
      $totalports = 0
      New-Item $file -Force
      foreach ($port in $ports) {
          $test = new-object system.Net.Sockets.TcpClient
          $wait = $test.beginConnect("allports.exposed", $port, $null, $null)
          $wait.asyncwaithandle.waitone(250, $false) | Out-Null
          $totalports++ | Out-Null
          if ($test.Connected) {
              $result = "$port open" 
              Write-Host -ForegroundColor Green $result
              $result | Out-File -Encoding ASCII -append $file
              $totalopen++ | Out-Null
          }
          else {
              $result = "$port closed" 
              Write-Host -ForegroundColor Red $result
              $totalclosed++ | Out-Null
              $result | Out-File -Encoding ASCII -append $file
          }
      }
      $results = "There were a total of $totalopen open ports out of $totalports ports tested."
      $results | Out-File -Encoding ASCII -append $file
      Write-Host $results
    cleanup_command: |
      Remove-Item -ErrorAction ignore "#{output_file}"
