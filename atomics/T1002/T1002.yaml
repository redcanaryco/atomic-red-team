---
attack_technique: T1002
display_name: Data Compressed
# Changed to dir User Profile instead of entire C: directory 
atomic_tests:
- name: Compress Data for Exfiltration With PowerShell
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration 
  supported_platforms:
    - windows
  input_arguments:
    input_file:
      description: Path that should be compressed into our output file
      type: Path
      default: $env:USERPROFILE
    output_file:
      description: Path where resulting compressed data should be placed
      type: Path
      default: $env:USERPROFILE\data.zip
  executor:
    name: powershell
    elevation_required: false
    command: |
      dir #{input_file} -Recurse | Compress-Archive -DestinationPath #{output_file}
    cleanup_command: |
      Remove-Item -path #{output_file}

- name: Compress Data for Exfiltration With Rar
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration 
  supported_platforms:
    - windows
  input_arguments:
    input_path:
      description: Path that should be compressed into our output file
      type: Path
      default: '%USERPROFILE%'
    file_extension:
      description: Extension of files to compress
      type: String
      default: ".txt"
    output_file:
      description: Path where resulting compressed data should be placed
      type: Path
      default: '%USERPROFILE%\data.rar'
  executor:
    name: command_prompt
    elevation_required: false
    prereq_command: |
      rar /?
    command: |
      rar a -r #{output_file} #{input_path} *#{file_extension}
    cleanup_command:
      del -f #{output_file}

- name: Data Compressed - nix - zip
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.
  supported_platforms:
    - linux
    - macos
  input_arguments:
    input_files:
      description: Path that should be compressed into our output file, may include wildcards
      type: Path
      default: $HOME/*.txt
    output_file:
      description: Path that should be output as a zip archive
      type: Path
      default: $HOME/data.zip
  executor:
    name: sh
    elevation_required: false
    prereq_command: |
      ls #{input_file}
    command: |
      zip #{output_file} #{input_files}
    cleanup_command:
      rm -f #{output_file}

- name: Data Compressed - nix - gzip Single File
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.
  supported_platforms:
    - linux
    - macos
  input_arguments:
    input_file:
      description: Path that should be compressed
      type: Path
      default: $HOME/victim-gzip.txt
    input_content:
      description: contents of compressed files if file does not already exist. default contains test credit card and social security number
      type: String
      default: 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101'
  executor:
    name: sh
    elevation_required: false
    command: |
      test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})
    cleanup_command: |
      rm -f #{input_file}.gz

- name: Data Compressed - nix - tar Folder or File
  description: |
    An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.
  supported_platforms:
    - linux
    - macos
  input_arguments:
    input_file_folder:
      description: Path that should be compressed
      type: Path
      default: '$HOME/$USERNAME'
    output_file:
      description: File that should be output
      type: Path
      default: '$HOME/data.tar.gz'
  executor:
    name: sh
    elevation_required: false
    prereq_command: |
      test -e #{input_file_folder}
    command: |
      tar -cvzf #{output_file} #{input_file_folder}
    cleanup_command: |
      rm -f #{output_file}
