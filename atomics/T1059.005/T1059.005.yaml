attack_technique: T1059.005
display_name: 'Command and Scripting Interpreter: Visual Basic'
atomic_tests:
- name: Visual Basic script execution to gather local computer information
  auto_generated_guid: 1620de42-160a-4fe5-bbaf-d3fef0181ce9
  description: |-
    Visual Basic execution test, execute vbscript via PowerShell.
  
    When successful, system information will be written to $env:TEMP\T1059.005.out.txt.
  supported_platforms:
  - windows
  input_arguments:
    vbscript:
      description: Path to sample script
      type: String
      default: PathToAtomicsFolder\T1059.005\src\sys_info.vbs
  dependency_executor_name: powershell
  dependencies:
  - description: Sample script must exist on disk at specified location (#{vbscript})
    prereq_command: 'if (Test-Path #{vbscript}) {exit 0} else {exit 1} '
    get_prereq_command: |-
      Invoke-WebRequest "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.005/src/sys_info.vbs" -OutFile "$env:TEMP\sys_info.vbs"
      New-Item -ItemType Directory (Split-Path #{vbscript}) -Force | Out-Null
      Copy-Item $env:TEMP\sys_info.vbs #{vbscript} -Force
  executor:
    command: 'cscript #{vbscript} > $env:TEMP\out.txt'
    cleanup_command: |-
      Remove-Item $env:TEMP\sys_info.vbs -ErrorAction Ignore
      Remove-Item $env:TEMP\T1059.005.out.txt -ErrorAction Ignore
    name: powershell
- name: Extract Memory via VBA
  auto_generated_guid: 
  description: |
    This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this
    we first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that
    memory location to a file stored in the $env:TEMP\atomic_t1059_005_test_output.bin.
  supported_platforms:
  - windows
  input_arguments:
    ms_product:
      description: Maldoc application Word
      type: String
      default: Word
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Microsoft #{ms_product} must be installed
    prereq_command: |
      try {
        New-Object -COMObject "#{ms_product}.Application" | Out-Null
        $process = "#{ms_product}"; if ( $process -eq "Word") {$process = "winword"}
        Stop-Process -Name $process
        exit 0
      } catch { exit 1 }
    get_prereq_command: |
      Write-Host "You will need to install Microsoft #{ms_product} manually to meet this requirement"
  executor:
    command: |
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-MalDoc.ps1") 
      Invoke-Maldoc -macroFile "PathToAtomicsFolder\T1059.005\src\T1059_005-macrocode.txt" -officeProduct "Word" -sub "Extract"
    cleanup_command: |
      Remove-Item "$env:TEMP\atomic_t1059_005_test_output.bin" -ErrorAction Ignore
    name: powershell