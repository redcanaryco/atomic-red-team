attack_technique: T1005
display_name: 'Data from Local System'
atomic_tests:
- name: Extract Memory via VBA
  auto_generated_guid: 
  description: |
    Adversaries may search local system sources, such as file systems or local databases, to find 
    files of interest and sensitive data prior to Exfiltration.

    Adversaries may do this using a Command and Scripting Interpreter, such as cmd, which has functionality
     to interact with the file system to gather information. Some adversaries may also use Automated 
     Collection on the local system.

    This module creates a string in memory, pulls out the pointer to that string and copies its memory contents to a file. The
    output file in question will be stored under $env:TEMP
  supported_platforms:
  - windows
  input_arguments:
    ms_product:
      description: Maldoc application Word
      type: String
      default: Word
    ms_office_version:
      description: Microsoft Office version number found in "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office"
      type: String
      default: "15.0"
    sub_name:
      description: Name of Sub to execute
      type: String
      default: Extract
    macrocode:
      description: Path to Macrocode to execute
      type: Path
      default: PathToAtomicsFolder\T1005\src\T1005-macrocode.txt
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Test Requires MS Office to be installed and have been run previously. Run -GetPrereqs to run msword and build dependent registry keys
    prereq_command: |
      If (Test-Path HKCU:SOFTWARE\Microsoft\Office\#{ms_office_version}) { exit 0 } else { exit 1 }
    get_prereq_command: |
      $xlApp = New-Object -ComObject "Word.Application"
      Stop-Process -Name WORD
  executor:
    command: |
      Import-Module C:\AtomicRedTeam\invoke-atomicredteam\Public\Invoke-MalDoc.ps1  
      Invoke-MalDoc #{macrocode} "#{sub_name}" "#{ms_office_version}" "#{ms_product}"
    cleanup_command: |
      Remove-ItemProperty -Path 'HKCU:\Software\Microsoft\Office\#{ms_office_version}\#{ms_product}\Security\' -Name 'AccessVBOM' -ErrorAction Ignore
      $fname = $env:TEMP + "\atomic_t1005_test_output.bin"
      if (Test-Path $fname) {
        Remove-Item $fname
      }
    name: powershell
