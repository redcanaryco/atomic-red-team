attack_technique: T1115
display_name: Clipboard Data
atomic_tests:
- name: Utilize Clipboard to store or execute commands from
  auto_generated_guid: 0cd14633-58d4-4422-9ede-daa2c9474ae7
  description: |
    Add data to clipboard to copy off or execute commands from.
  supported_platforms:
  - windows
  executor:
    command: |
      dir | clip
      echo "T1115" > %temp%\T1115.txt
      clip < %temp%\T1115.txt
    cleanup_command: |
      del %temp%\T1115.txt >nul 2>&1
    name: command_prompt
- name: Execute Commands from Clipboard using PowerShell
  auto_generated_guid: d6dc21af-bec9-4152-be86-326b6babd416
  description: |
    Utilize PowerShell to echo a command to clipboard and execute it
  supported_platforms:
  - windows
  executor:
    command: |
      echo Get-Process | clip
      Get-Clipboard | iex
    name: powershell
- name: Execute commands from clipboard
  auto_generated_guid: 1ac2247f-65f8-4051-b51f-b0ccdfaaa5ff
  description: Echo a command to clipboard and execute it
  supported_platforms:
  - macos
  executor:
    command: |-
      echo ifconfig | pbcopy
      $(pbpaste)
    name: bash
- name: Collect Clipboard Data via VBA
  auto_generated_guid: 
  description: |
    This module copies the data stored in the user's clipboard and writes it to a file.

    A note about this module, ensure that you have "Trust access to the VBA project object model" checked. This
    option can be found under File -> Options -> Trust Center -> Trust Center Settings -> Developer Macro Settings
  supported_platforms:
  - windows
  input_arguments:
    ms_product:
      description: Maldoc application Word
      type: String
      default: Word
    ms_office_version:
      description: Microsoft Office version number found in "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office"
      type: String
      default: "15.0"
    sub_name:
      description: Name of Sub to execute
      type: String
      default: Getclipboard
    macrocode:
      description: Path to Macrocode to execute
      type: Path
      default: PathToAtomicsFolder\T1115\src\T1115-macrocode.txt
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Test Requires MS Office to be installed and have been run previously. Run -GetPrereqs to run msword and build dependent registry keys
    prereq_command: |
      If (Test-Path HKCU:SOFTWARE\Microsoft\Office\#{ms_office_version}) { exit 0 } else { exit 1 }
    get_prereq_command: |
      $xlApp = New-Object -ComObject "Word.Application"
      Stop-Process -Name WORD
  executor:
    command: |
      Set-Clipboard -value "Atomic T1115 Test, grab data from clipboard via VBA"
      $wdApp = New-Object -COMObject "Word.Application"
      $wdApp.Visible = $true
      $wdDoc = $wdApp.Documents.Add()
      $wdDoc.VBProject.References.AddFromFile("C:\Windows\system32\FM20.DLL") | Out-Null
      $macro = [System.IO.File]::ReadAllText("#{macrocode}")
      $vbaModule = $wdDoc.VBProject.VBComponents.Add(1)
      $vbaModule.CodeModule.AddFromString($macro) | Out-Null
      $wdApp.Run("#{sub_name}")
      $wdDoc.Close($false)
      $wdApp.Quit()
      [System.Runtime.Interopservices.Marshal]::ReleaseComObject($wdDoc) | Out-Null
      [System.Runtime.Interopservices.Marshal]::ReleaseComObject($wdApp) | Out-Null
      [System.GC]::Collect()
      [System.GC]::WaitForPendingFinalizers()
      Remove-Variable wdDoc
      Remove-Variable wdApp
    cleanup_command: |
      Remove-ItemProperty -Path 'HKCU:\Software\Microsoft\Office\#{ms_office_version}\#{ms_product}\Security\' -Name 'AccessVBOM' -ErrorAction Ignore
      $fname = $env:TEMP + "\atomic_T1115_clipboard_data.txt"
      if (Test-Path $fname) {
        Remove-Item $fname
      }
    name: powershell
