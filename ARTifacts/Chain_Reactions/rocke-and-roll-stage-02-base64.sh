IyEgL2Jpbi9iYXNoCgpmdW5jdGlvbiBjKCkgewpwa2lsbCAtZiBzb3VycGx1bQpwa2lsbCAtZiB4
bXJpZwpwa2lsbCAtZiBjcnlwdG9uaWdodApwa2lsbCAtZiBzdHJhdHVtCnBraWxsIC1mIG1peG5l
cmR4CnBraWxsIC1mIG1pbmV4bXIKcGtpbGwgLWYgbWluZXJkCnBraWxsIC1mIG1pbmVyZ2F0ZQpw
a2lsbCAtZiBrd29ya2VyMzQKcGtpbGwgLWYgWGJhc2gKCiMgICBUYWN0aWM6IERlZmVuc2UgRXZh
c2lvbgojICAgVGVjaG5pcXVlOiBUMTIyMiAtIEZpbGUgUGVybWlzc2lvbiBNb2RpZmljYXRpb24K
Y2hhdHRyIC1pIC90bXAva3dvcmtlcmRzIC92YXIvdG1wL2t3b3JrZXJkcwoKIyAgIFRhY3RpYzog
RGVmZW5zZSBFdmFzaW9uCiMgICBUZWNobmlxdWU6IFQxMTA3IC0gRmlsZSBEZWxldGlvbgpybSAt
cmYgL3RtcC9rd29ya2VyZHMgL3Zhci90bXAva3dvcmtlcmRzCgojICAgVGFjdGljOiBEaXNjb3Zl
cnkKIyAgIFRlY2huaXF1ZTogVDEwNTcgLSBQcm9jZXNzIERpc2NvdmVyeQpwcyBhdXhmfGdyZXAg
LXYgZ3JlcHxncmVwIC12ICJcXyIgfGdyZXAgLXYgImt0aHJlYWRkIiB8Z3JlcCAiXFsuKlxdInxh
d2sgJ3twcmludCAkMn0nfHhhcmdzIGtpbGwgLTkKcHMgYXV4ZnxncmVwIC12IGdyZXB8Z3JlcCAi
eG1yaWciIHwgYXdrICd7cHJpbnQgJDJ9J3x4YXJncyBraWxsIC05CnBzIGF1eGZ8Z3JlcCAtdiBn
cmVwfGdyZXAgIlhiYXNoIiB8IGF3ayAne3ByaW50ICQyfSd8eGFyZ3Mga2lsbCAtOQpwcyBhdXhm
fGdyZXAgLXYgZ3JlcHxncmVwICJzdHJhdHVtIiB8IGF3ayAne3ByaW50ICQyfSd8eGFyZ3Mga2ls
bCAtOQpwcyBhdXhmfGdyZXAgLXYgZ3JlcHxncmVwICJ4bXIiIHwgYXdrICd7cHJpbnQgJDJ9J3x4
YXJncyBraWxsIC05CnBzIGF1eGZ8Z3JlcCAtdiBncmVwfGdyZXAgIm1pbmVyZCIgfCBhd2sgJ3tw
cmludCAkMn0nfHhhcmdzIGtpbGwgLTkKCiMgICBUYWN0aWM6IERpc2NvdmVyeQojICAgVGVjaG5p
cXVlOiBUMTA0OSAtIFN5c3RlbSBOZXR3b3JrIENvbm5lY3Rpb25zIERpc2NvdmVyeQpuZXRzdGF0
IC1hbnAgfCBncmVwIDozMzMzIHxhd2sgJ3twcmludCAkN30nfCBhd2sgLUYnWy9dJyAne3ByaW50
ICQxfScgfCB4YXJncyBraWxsIC05Cm5ldHN0YXQgLWFucCB8IGdyZXAgOjQ0NDQgfGF3ayAne3By
aW50ICQ3fSd8IGF3ayAtRidbL10nICd7cHJpbnQgJDF9JyB8IHhhcmdzIGtpbGwgLTkKbmV0c3Rh
dCAtYW5wIHwgZ3JlcCA6NTU1NSB8YXdrICd7cHJpbnQgJDd9J3wgYXdrIC1GJ1svXScgJ3twcmlu
dCAkMX0nIHwgeGFyZ3Mga2lsbCAtOQpuZXRzdGF0IC1hbnAgfCBncmVwIDo2NjY2IHxhd2sgJ3tw
cmludCAkN30nfCBhd2sgLUYnWy9dJyAne3ByaW50ICQxfScgfCB4YXJncyBraWxsIC05Cm5ldHN0
YXQgLWFucCB8IGdyZXAgOjc3NzcgfGF3ayAne3ByaW50ICQ3fSd8IGF3ayAtRidbL10nICd7cHJp
bnQgJDF9JyB8IHhhcmdzIGtpbGwgLTkKbmV0c3RhdCAtYW5wIHwgZ3JlcCA6MzM0NyB8YXdrICd7
cHJpbnQgJDd9J3wgYXdrIC1GJ1svXScgJ3twcmludCAkMX0nIHwgeGFyZ3Mga2lsbCAtOQpuZXRz
dGF0IC1hbnAgfCBncmVwIDoxNDQ0NCB8YXdrICd7cHJpbnQgJDd9J3wgYXdrIC1GJ1svXScgJ3tw
cmludCAkMX0nIHwgeGFyZ3Mga2lsbCAtOQpuZXRzdGF0IC1hbnAgfCBncmVwIDoxNDQzMyB8YXdr
ICd7cHJpbnQgJDd9J3wgYXdrIC1GJ1svXScgJ3twcmludCAkMX0nIHwgeGFyZ3Mga2lsbCAtOQoK
ZWNobyAkKGRhdGUgLXUpICJFeGVjdXRlZCBBdG9taWMgUmVkIFRlYW0gUm9ja2UgYW5kIFJvbGws
IFN0YWdlIDAyLCBwYXJ0IEIiID4+IC90bXAvYXRvbWljLmxvZwp9CgpmdW5jdGlvbiBiKCkgewog
ICAgbWtkaXIgLXAgL3Zhci90bXAKCiAgICAjICAgVGFjdGljOiBEZWZlbnNlIEV2YXNpb24KICAg
ICMgICBUZWNobmlxdWU6IFQxMjIyIC0gRmlsZSBQZXJtaXNzaW9uIE1vZGlmaWNhdGlvbgogICAg
Y2htb2QgMTc3NyAvdmFyL3RtcAoKICAgICMgICBUYWN0aWM6IERlZmVuc2UgRXZhc2lvbgogICAg
IyAgIFRlY2huaXF1ZTogVDEwMzYgLSBNYXNxdWVyYWRpbmcKICAgIChjdXJsIC1mc1NMIC0tY29u
bmVjdC10aW1lb3V0IDEyMCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZm9yZW5z
aWNpdGd1eS9hdG9taWMtcmVkLXRlYW0vbWFzdGVyL0FSVGlmYWN0cy9DaGFpbl9SZWFjdGlvbnMv
YXRvbWljLWhlbGxvIC1vIC92YXIvdG1wL2t3b3JrZXJkc3x8d2dldCBodHRwczovL3Jhdy5naXRo
dWJ1c2VyY29udGVudC5jb20vZm9yZW5zaWNpdGd1eS9hdG9taWMtcmVkLXRlYW0vbWFzdGVyL0FS
VGlmYWN0cy9DaGFpbl9SZWFjdGlvbnMvYXRvbWljLWhlbGxvIC1PIC92YXIvdG1wL2t3b3JrZXJk
cykgJiYgY2htb2QgK3ggL3Zhci90bXAva3dvcmtlcmRzCiAgICBub2h1cCAvdmFyL3RtcC9rd29y
a2VyZHMgPi9kZXYvbnVsbCAyPiYxICYKCiAgICBlY2hvICQoZGF0ZSAtdSkgIkV4ZWN1dGVkIEF0
b21pYyBSZWQgVGVhbSBSb2NrZSBhbmQgUm9sbCwgU3RhZ2UgMDIsIHBhcnQgQyIgPj4gL3RtcC9h
dG9taWMubG9nCn0KCmZ1bmN0aW9uIGEoKSB7CgogICAgIyAgIFRhY3RpYzogRGVmZW5zZSBFdmFz
aW9uCiAgICAjICAgVGVjaG5pcXVlOiBUMTIyMiAtIEZpbGUgUGVybWlzc2lvbiBNb2RpZmljYXRp
b24KCWNoYXR0ciAtaSAvZXRjL2Nyb24uZC9yb290IC92YXIvc3Bvb2wvY3Jvbi9yb290IC92YXIv
c3Bvb2wvY3Jvbi9jcm9udGFicy9yb290CgogICAgIyAgIFRhY3RpYzogUGVyc2lzdGVuY2UKICAg
ICMgICBUZWNobmlxdWU6IFQxMTY4IC0gTG9jYWwgSm9iIFNjaGVkdWxpbmcKCWVjaG8gLWUgIiov
MTAgKiAqICogKiByb290IChjdXJsIC1mc1NMIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50
LmNvbS9mb3JlbnNpY2l0Z3V5L2F0b21pYy1yZWQtdGVhbS9tYXN0ZXIvQVJUaWZhY3RzL0NoYWlu
X1JlYWN0aW9ucy9yb2NrZS1hbmQtcm9sbC1zdGFnZS0wMi1kZWNvZGVkLnNofHx3Z2V0IC1xIC1P
LSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZm9yZW5zaWNpdGd1eS9hdG9taWMt
cmVkLXRlYW0vbWFzdGVyL0FSVGlmYWN0cy9DaGFpbl9SZWFjdGlvbnMvcm9ja2UtYW5kLXJvbGwt
c3RhZ2UtMDItZGVjb2RlZC5zaCl8c2hcbiMjIiA+IC9ldGMvY3Jvbi5kL3Jvb3QKCW1rZGlyIC1w
IC92YXIvc3Bvb2wvY3Jvbi9jcm9udGFicwoJZWNobyAtZSAiKi8zMSAqICogKiAqIChjdXJsIC1m
c1NMIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mb3JlbnNpY2l0Z3V5L2F0b21p
Yy1yZWQtdGVhbS9tYXN0ZXIvQVJUaWZhY3RzL0NoYWluX1JlYWN0aW9ucy9yb2NrZS1hbmQtcm9s
bC1zdGFnZS0wMi1kZWNvZGVkLnNofHx3Z2V0IC1xIC1PLSBodHRwczovL3Jhdy5naXRodWJ1c2Vy
Y29udGVudC5jb20vZm9yZW5zaWNpdGd1eS9hdG9taWMtcmVkLXRlYW0vbWFzdGVyL0FSVGlmYWN0
cy9DaGFpbl9SZWFjdGlvbnMvcm9ja2UtYW5kLXJvbGwtc3RhZ2UtMDItZGVjb2RlZC5zaCl8c2hc
biMjIiA+IC92YXIvc3Bvb2wvY3Jvbi9jcm9udGFicy9yb290Cglta2RpciAtcCAvZXRjL2Nyb24u
ZGFpbHkKCShjdXJsIC1mc1NMIC0tY29ubmVjdC10aW1lb3V0IDEyMCBodHRwczovL3Jhdy5naXRo
dWJ1c2VyY29udGVudC5jb20vZm9yZW5zaWNpdGd1eS9hdG9taWMtcmVkLXRlYW0vbWFzdGVyL0FS
VGlmYWN0cy9DaGFpbl9SZWFjdGlvbnMvcm9ja2UtYW5kLXJvbGwtc3RhZ2UtMDItZGVjb2RlZC5z
aCAtbyAvZXRjL2Nyb24uZGFpbHkvb2FuYWNyb25lcnx8d2dldCBodHRwczovL3Jhdy5naXRodWJ1
c2VyY29udGVudC5jb20vZm9yZW5zaWNpdGd1eS9hdG9taWMtcmVkLXRlYW0vbWFzdGVyL0FSVGlm
YWN0cy9DaGFpbl9SZWFjdGlvbnMvcm9ja2UtYW5kLXJvbGwtc3RhZ2UtMDItZGVjb2RlZC5zaCAt
TyAvZXRjL2Nyb24uZGFpbHkvb2FuYWNyb25lcikKCiAgICAjICAgVGFjdGljOiBEZWZlbnNlIEV2
YXNpb24KICAgICMgICBUZWNobmlxdWU6IFQxMjIyIC0gRmlsZSBQZXJtaXNzaW9uIE1vZGlmaWNh
dGlvbgogICAgY2htb2QgNzU1IC9ldGMvY3Jvbi5kYWlseS9vYW5hY3JvbmVyCgogICAgIyAgIFRh
Y3RpYzogRGVmZW5zZSBFdmFzaW9uCiAgICAjICAgVGVjaG5pcXVlOiBUMTA5OSAtIFRpbWVzdG9t
cAoJdG91Y2ggLWFjbXIgL2Jpbi9zaCAvZXRjL2Nyb24uZGFpbHkvb2FuYWNyb25lcgogICAgdG91
Y2ggLWFjbXIgL2Jpbi9zaCAvZXRjL2Nyb24uZC9yb290CiAgICB0b3VjaCAtYWNtciAvYmluL3No
IC92YXIvc3Bvb2wvY3Jvbi9jcm9udGFicy9yb290CgogICAgZWNobyAkKGRhdGUgLXUpICJFeGVj
dXRlZCBBdG9taWMgUmVkIFRlYW0gUm9ja2UgYW5kIFJvbGwsIFN0YWdlIDAyLCBwYXJ0IEEiID4+
IC90bXAvYXRvbWljLmxvZwp9CgphCmIKYw==
